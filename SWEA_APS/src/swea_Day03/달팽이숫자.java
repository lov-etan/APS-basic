package swea_Day03;

import java.util.Scanner;

public class 달팽이숫자 {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		//1. 문제를 읽기
		//2. 입력 받기
		//3. 입력값 -> 출력값
		
		
		//테스트케이스 수 입력받기
		int T = sc.nextInt();
		
		//테스트케이스 수만큼 반복
		for(int tc=1; tc<T; tc++) {
			// N 입력받기
			int N = sc.nextInt();
			int[][] arr = new int[N][N];
			
			//2차원 배열 만들고
			// 왼쪽 위에서부터 숫자를 채워나가기
			//N*N번(1~N*N) 만큼 반복이 일어남.
			
			//델타배열 안 쓰고 해보기
			
			int cnt = 0; //1~N*N까지 반복
			int r = 0;
			int c = 0; //(0,0)부터 출발
			int d =0; // 우(0) 하(1) 좌(2) 상(3)
			
			int[] dr = {0,1,0,-1};
			int[] dc = {1,0,-1,0};
			
			//cnt 증가, 좌표값 집어넣는 것, 이동하는 것
			
			while(cnt++ < N*N) { //for문, while문
				//1. 현재좌표(r,c)에다가 cnt를 넣는다.
				map[r][c] = cnt;
				
				//2. 그 다음 좌표 만들기
				//2-1. 일단 그 방향으로 좌표를 만든다.
				int = nr = r+dr[d];
				int nc = c + dc[d];
				
				//2-2. 만약에 경계조건을 벗어났거나, 이미 그 자이에 0이 아닌 숮지가 있는 경우
				if(nr<0|| nr>=N|| nc<0||nc>=)
			}
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				//2. 1칸 이동한다.(바로 다음칸 좌표 만들기)
				//2-1. 오른쪽 방향이라면,
				// 		먼저 갈 수 있는지(경계를 벗어나거나, 이미 숫자가 채워져 있으면)
				// 		갈 수 없다면 => 방향을 바꾸어서(우->하) 그 다음 좌표 만들기
				// 		갈 수 있다면 => (현재 방향 그대로 유지) 그 다음 좌표 만들기
//				if(d == 0) {//2-1. 오른쪽 방향으로 가고 있었다면(열번호),
//					if( c == N-1 || (c < N-1 && arr[r][c+1] != 0)) {
//						d = (d+1)%4; //그 다음 방향으로 가기
//						r++;// 그 다움 좌표는 아래
//					} else {//갈 수 있다면
//						c++; // 그 다음 좌표는 오른쪽
//					}
//				}
//				
//				
//				if(d == 0) {//2-1. 오른쪽 방향으로 가고 있었다면(열번호),
//					if( c == N-1 || (c < N-1 && arr[r][c+1] != 0)) {
//						d = (d+1)%4; //그 다음 방향으로 가기
//						r++;// 그 다움 좌표는 아래
//					} else {//갈 수 있다면
//						c++; // 그 다음 좌표는 오른쪽
//					}
//				}
//				
//				else if(d == 1) {//2-1. 오른쪽 방향으로 가고 있었다면(열번호),
//					if( c == N-1 || (c < N-1 && arr[r][c+1] != 0)) {
//						d = (d+1)%4; //그 다음 방향으로 가기
//						r++;// 그 다움 좌표는 아래
//					} else {//갈 수 있다면
//						c++; // 그 다음 좌표는 오른쪽
//					}
//				}
//				
//				else if(d == 2)//2-1. 오른쪽 방향으로 가고 있었다면(열번호),
//					if( c == N-1 || (c < N-1 && arr[r][c+1] != 0)) {
//						d = (d+1)%4; //그 다음 방향으로 가기
//						r--;// 그 다움 좌표는 아래
//					} else {//갈 수 있다면
//						c--; // 그 다음 좌표는 오른쪽
//					}
//				}
//				
//				else if(d == 0) {//2-1. 오른쪽 방향으로 가고 있었다면(열번호),
//					if( r == 0 || (r >0 && arr[r-1][c] != 0)) {
//						d = (d+1)%4; //그 다음 방향으로 가기
//						r++;// 그 다움 좌표는 아래
//					} else {//갈 수 있다면
//						c++; // 그 다음 좌표는 오른쪽
//				}
//			}
			
				
				
			}
			
			
		}
	}

}
